# We use this script to check if the secre keys (and corresponding pubkeyes)generated 
# by keypairoom match the existing pubkeys for the user 

# Loading scenarios
Scenario 'ecdh': Create the public key
Scenario 'es256': Create the public key
Scenario 'ethereum': Create the address
Scenario 'reflow': Create the public key
Scenario 'eddsa': Create the public key


# Loading the secret keys
Given I have the 'keyring'


# Loading the pubkeys from Starters backend
#
# NOTE:
# the pubkeys have to be renamed by appending  '_backend' to each of them
Given I have a 'base58' named 'bitcoin_public_key_backend'
Given I have a 'base58' named 'ecdh_public_key_backend'
Given I have a 'base58' named 'eddsa_public_key_backend'
Given I have a 'base58' named 'es256_public_key_backend'
Given I have a 'base58' named 'reflow_public_key_backend'
Given I have a 'hex' named 'ethereum_address_backend'



# Generating the public keys
When I create the ecdh public key
When I create the es256 public key
When I create the reflow public key
When I create the bitcoin public key
When I create the eddsa public key
When I create the ethereum address


# Here we match if the newly generated pubkeys  match with the old ones
# If one verification fails, Zenroom throws an error
When I verify 'ecdh public key' is equal to 'ecdh public key backend'
When I verify 'bitcoin_public_key' is equal to 'bitcoin_public_key_backend'
When I verify 'eddsa_public_key' is equal to 'eddsa_public_key_backend'
When I verify 'es256_public_key' is equal to 'es256_public_key_backend'
When I verify 'ethereum_address' is equal to 'ethereum_address_backend'
When I verify 'reflow_public_key' is equal to 'reflow_public_key_backend'


Then print string 'MATCH'


